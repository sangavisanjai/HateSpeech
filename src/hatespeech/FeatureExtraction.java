/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hatespeech;

import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author SEABIRDS-PC
 */
public class FeatureExtraction extends javax.swing.JFrame {

    /**
     * Creates new form FeatureExtraction
     */
    
    ArrayList posWd=new ArrayList();
    public static ArrayList negWd=new ArrayList();
    public static ArrayList allTweetsAfterFeatureExtraction=new ArrayList();
    
    public FeatureExtraction() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 0, 0));

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Feature Extraction");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(278, 278, 278)
                .addComponent(jLabel1)
                .addContainerGap(273, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jButton1.setText("Feature Extraction");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Classification");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 874, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        LRClassification mf=new LRClassification();
        mf.setTitle("Classification");
        mf.setVisible(true);
        mf.setResizable(false);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        try
        {
             //// Read Posivie words
             
            File fe1=new File("Positive.txt");
            FileInputStream fis1=new FileInputStream(fe1);
            byte data1[]=new byte[fis1.available()];
            fis1.read(data1);
            fis1.close();
            
            String sg1[]=new String(data1).split("\n");
               
            for(int i=0;i<sg1.length;i++)
                posWd.add(sg1[i].trim());
             
             ///// Read negative word
             
            File fe2=new File("Negative.txt");
            FileInputStream fis2=new FileInputStream(fe2);
            byte data2[]=new byte[fis2.available()];
            fis2.read(data2);
            fis2.close();
            
            String sg2[]=new String(data2).split("\n");
               
            for(int i=0;i<sg2.length;i++)
                negWd.add(sg2[i].trim());
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        ArrayList alltweetsAfterPreprocessing=Preprocessing.alltweetsAfterPreprocessing;
        allTweetsAfterFeatureExtraction=alltweetsAfterPreprocessing;
        
        int totalWordUnigramCount=0,totalWordBigramCount=0;
        int totalCharTrigramCount=0,totalCharFourgramCount=0;
        int totalSyntacticBasedFeaturesCount=0,totalnegativeSentimentBasedFeaturesCount=0;
        
        for(int i=0;i<alltweetsAfterPreprocessing.size();i++)
        {
            String tweet=alltweetsAfterPreprocessing.get(i).toString().trim();
            
                /* Word n-gram Features */

            String unigram[]=wordNgrams(tweet.trim(), 1);
            String bigram[]=wordNgrams(tweet.trim(), 2);
            
            System.out.println("Tweet: "+tweet);
            System.out.println("Word unigram: "+Arrays.toString(unigram));
            System.out.println("Word bigram: "+Arrays.toString(bigram));
            
            totalWordUnigramCount=totalWordUnigramCount+unigram.length;
            totalWordBigramCount=totalWordBigramCount+bigram.length;
            
            List trigram=characterNgrams(tweet.trim(), 3);
            List fourgram=characterNgrams(tweet.trim(), 4);
            
            System.out.println("Character trigram: "+trigram);
            System.out.println("Character fourgram: "+fourgram);
            
            totalCharTrigramCount=totalCharTrigramCount+trigram.size();
            totalCharFourgramCount=totalCharFourgramCount+fourgram.size();
            
            String sen[]=tweet.trim().split(" ");
            int pos=0; int neg=0;
            for(int j=0;j<sen.length;j++)
            {                
                if(negWd.contains(sen[j].trim()))
                {
                    neg++;
                }
                else
                {
                    pos++;
                }
            }
            
            System.out.println("Syntactic Based Features: "+pos);
            System.out.println("Negative Sentiment Based Features: "+neg+"\n");
            
            totalSyntacticBasedFeaturesCount=totalSyntacticBasedFeaturesCount+pos;
            totalnegativeSentimentBasedFeaturesCount=totalnegativeSentimentBasedFeaturesCount+neg;                        
        }
        
        System.out.println("totalWordUnigramCount: "+totalWordUnigramCount);
        System.out.println("totalWordBigramCount: "+totalWordBigramCount);
        
        System.out.println("totalCharTrigramCount: "+totalCharTrigramCount);
        System.out.println("totalCharFourgramCount: "+totalCharFourgramCount);
        
        System.out.println("totalSyntacticBasedFeaturesCount: "+totalSyntacticBasedFeaturesCount);
        System.out.println("totalnegativeSentimentBasedFeaturesCount: "+totalnegativeSentimentBasedFeaturesCount);
        
        jTextArea1.append("Total Word Unigram Features Count: "+totalWordUnigramCount+"\n\n");
        jTextArea1.append("Total Word Bigram Features Count: "+totalWordBigramCount+"\n\n\n");
        
        jTextArea1.append("Total Character Trigram Features Count: "+totalCharTrigramCount+"\n\n");
        jTextArea1.append("Total Character Fourgram Features Count: "+totalCharFourgramCount+"\n\n\n");
        
        jTextArea1.append("Total Syntactic Based Features Count: "+totalSyntacticBasedFeaturesCount+"\n\n");
        jTextArea1.append("Total negative Sentiment Based Features Count: "+totalnegativeSentimentBasedFeaturesCount+"\n\n");
        
        jTextArea1.setEditable(false);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FeatureExtraction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FeatureExtraction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FeatureExtraction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FeatureExtraction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FeatureExtraction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    public static String[] wordNgrams(String s, int len) 
    {
        String[] parts = s.split(" ");
        String[] result = new String[parts.length - len + 1];
        for(int i = 0; i < parts.length - len + 1; i++) {
           StringBuilder sb = new StringBuilder();
           for(int k = 0; k < len; k++) {
               if(k > 0) sb.append(' ');
               sb.append(parts[i+k]);
           }
           result[i] = sb.toString();
        }
        return result;
    }        

    private static List<String> characterNgrams(String word, int ngram) 
    {
        if (ngram == 0 || word == null) {
            return Collections.emptyList();
        }

        word = word.replace(" ", "");

        if (word.isEmpty()) {
            return Collections.emptyList();
        }

        if (ngram > word.length()) {
            throw new IllegalArgumentException("Invalid word or n-gram");
        }

        List<String> ngrams = new ArrayList<>();
        for (int i = 0; i <= word.length() - ngram; i++) {
            ngrams.add(word.substring(i, i + ngram).trim());
        }
        return ngrams;
    }
}
